{"ast":null,"code":"var _jsxFileName = \"/home/kudos/Documents/react-projects/image-gallary/public/reactjs/src/views/components/galarry.js\";\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\nimport axios from '../../util/axios';\nexport default class galarry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResponsePopUp = (message, title, success, error) => {\n      this.setState({\n        alert: /*#__PURE__*/React.createElement(ReactBSAlert, {\n          success: success,\n          error: error,\n          style: {\n            display: \"block\",\n            marginTop: \"250px\"\n          },\n          title: title,\n          onConfirm: () => this.handleModalClose(),\n          confirmBtnBsStyle: \"success\",\n          btnSize: \"md\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 17\n          }\n        }, message)\n      });\n    };\n\n    this.handleModalClose = () => {\n      this.setState({\n        alert: null\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.handleGetImagesList();\n    };\n\n    this.handleGetImagesList = () => {\n      axios.get('/api/image').then(response => {\n        this.setState({\n          imagesList: response.data\n        });\n      }).catch(error => {\n        return this.handleResponsePopUp(error.response.data.message ? error.response.data.message : error.message, 'Error', false, true);\n      });\n    };\n\n    this.handleSaveFile = () => {\n      const postData = {\n        file_name: this.state.fileName,\n        file_data: this.state.fileData\n      };\n      axios.post('/api/image', postData).then(response => {\n        return this.handleResponsePopUp(response.data.message, 'Success', true, false);\n      }).catch(error => {\n        return this.handleResponsePopUp(error.response.data.message, 'Error', false, true);\n      });\n    };\n\n    this.handleFileChange = event => {\n      let selectedFile = event.target.files;\n      /*Chaeck file type*/\n\n      const fileName = selectedFile[0].name;\n      console.log(fileName);\n      const idxDot = fileName.lastIndexOf(\".\") + 1;\n      const extFile = fileName.substr(idxDot, fileName.length).toLowerCase();\n\n      if (extFile == \"jpg\" || extFile == \"jpeg\" || extFile == \"png\") {} else {\n        return this.handleResponsePopUp('Only image is suported', 'Error', false, true);\n      }\n\n      ; //Check File is not Empty\n\n      if (selectedFile.length > 0) {\n        // Select the very first file from list\n        let fileToLoad = selectedFile[0]; // FileReader function for read the file.\n\n        let fileReader = new FileReader(); // Onload of file read the file content\n\n        fileReader.onload = fileLoadedEvent => {\n          this.setState({\n            fileData: fileLoadedEvent.target.result,\n            fileName: selectedFile[0].name\n          });\n        }; // Convert data to base64\n\n\n        fileReader.readAsDataURL(fileToLoad);\n        this.handleSaveFile();\n      }\n\n      ;\n    };\n\n    this.state = {\n      alert: null,\n      fileData: '',\n      fileName: '',\n      imagesList: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.alert, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"galarry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"galarry_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"galarry_body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Body, {\n      handleUploadFile: event => this.handleFileChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"galarry_fotter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/kudos/Documents/react-projects/image-gallary/public/reactjs/src/views/components/galarry.js"],"names":["React","Component","Header","Body","Footer","ReactBSAlert","axios","galarry","constructor","props","handleResponsePopUp","message","title","success","error","setState","alert","display","marginTop","handleModalClose","componentDidMount","handleGetImagesList","get","then","response","imagesList","data","catch","handleSaveFile","postData","file_name","state","fileName","file_data","fileData","post","handleFileChange","event","selectedFile","target","files","name","console","log","idxDot","lastIndexOf","extFile","substr","length","toLowerCase","fileToLoad","fileReader","FileReader","onload","fileLoadedEvent","result","readAsDataURL","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\nimport axios from '../../util/axios';\n\nexport default class galarry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alert: null,\n            fileData: '',\n            fileName: '',\n            imagesList: []\n        };\n    };\n\n    // Pop-Ups for response in Modals\n    handleResponsePopUp = (message, title, success, error) => {\n        this.setState({\n            alert: (\n                <ReactBSAlert\n                    success={success}\n                    error={error}\n                    style={{ display: \"block\", marginTop: \"250px\" }}\n                    title={title}\n                    onConfirm={() => this.handleModalClose()}\n                    confirmBtnBsStyle=\"success\"\n                    btnSize=\"md\"\n                >\n                    {message}\n                </ReactBSAlert>\n            )\n        });\n    };\n\n    handleModalClose = () => {\n        this.setState({\n            alert: null\n        });\n    };\n\n    componentDidMount = () => {\n        this.handleGetImagesList();\n    }\n\n    handleGetImagesList = () => {\n        axios.get('/api/image').then(response => {\n            this.setState({\n                imagesList: response.data\n            });\n        }).catch(error => {\n            return this.handleResponsePopUp(error.response.data.message ? error.response.data.message : error.message, 'Error', false, true);\n        });\n    }\n\n    handleSaveFile = () => {\n        const postData = {\n            file_name: this.state.fileName,\n            file_data: this.state.fileData,\n        };\n        axios.post('/api/image', postData).then(response => {\n            return this.handleResponsePopUp(response.data.message, 'Success', true, false);\n        }).catch(error => {\n            return this.handleResponsePopUp(error.response.data.message, 'Error', false, true);\n        });\n    };\n\n    handleFileChange = (event) => {\n        let selectedFile = event.target.files;\n        /*Chaeck file type*/\n        const fileName = selectedFile[0].name;\n        console.log(fileName)\n        const idxDot = fileName.lastIndexOf(\".\") + 1;\n        const extFile = fileName.substr(idxDot, fileName.length).toLowerCase();\n        if (extFile == \"jpg\" || extFile == \"jpeg\" || extFile == \"png\") {\n        } else {\n            return this.handleResponsePopUp('Only image is suported', 'Error', false, true);\n        };\n        //Check File is not Empty\n        if (selectedFile.length > 0) {\n            // Select the very first file from list\n            let fileToLoad = selectedFile[0];\n            // FileReader function for read the file.\n            let fileReader = new FileReader();\n            // Onload of file read the file content\n            fileReader.onload = (fileLoadedEvent) => {\n                this.setState({\n                    fileData: fileLoadedEvent.target.result,\n                    fileName: selectedFile[0].name\n                });\n            };\n            // Convert data to base64\n            fileReader.readAsDataURL(fileToLoad);\n            this.handleSaveFile();\n        };\n    };\n\n    render() {\n        return (\n            <>\n                {this.state.alert}\n                <div className='galarry'>\n                    <div className='galarry_header'>\n                        <Header />\n                    </div>\n                    <div className='galarry_body'>\n                        <Body handleUploadFile={(event) => this.handleFileChange(event)} />\n\n                    </div>\n                    <div className='galarry_fotter'>\n                        <Footer />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}