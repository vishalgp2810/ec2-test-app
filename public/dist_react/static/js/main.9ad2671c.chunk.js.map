{"version":3,"sources":["views/components/Header.js","views/components/image.js","views/components/Body.js","views/components/Footer.js","util/axios.js","views/components/galarry.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","image","img","name","handlePreviewImage","id","onclick","src","alt","Body","handleUploadFile","imgList","Button","variant","component","onChange","event","type","accept","map","record","index","file_data","file_name","console","log","Footer","instance","axios","create","baseURL","galarry","props","handleResponsePopUp","message","title","success","error","setState","alert","style","display","marginTop","onConfirm","handleModalClose","confirmBtnBsStyle","btnSize","componentDidMount","handleGetImagesList","get","then","response","imagesList","data","catch","handleSaveFile","postData","state","fileName","fileData","post","handleFileChange","selectedFile","target","files","idxDot","lastIndexOf","extFile","substr","length","toLowerCase","fileToLoad","fileReader","FileReader","onload","fileLoadedEvent","result","readAsDataURL","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8YAYeA,MATf,WAEI,OACI,yBAAKC,UAAU,UACX,yC,8CCMGC,MAVf,YAAmD,IAAlCC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,mBAExB,OACI,yBAAKC,GAAIF,EAAMH,UAAU,SACrB,yBAAKM,QAAS,kBAAMF,EAAmBD,IAAOI,IAAKL,EAAKM,IAAI,KAC5D,4BAAKL,KCwCFM,MAzCf,YAA8C,IAA9BC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,QAM9B,OACI,oCACI,yBAAKX,UAAU,QACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,kBAACY,EAAA,EAAD,CACIZ,UAAU,eACVa,QAAQ,YACRC,UAAU,SAEV,kBAAC,IAAD,CAAiBd,UAAU,gBAC3B,0BAAMA,UAAU,gBAAhB,UACA,2BAAOe,SAAU,SAACC,GAAD,OAAWN,EAAiBM,IAAQhB,UAAU,aAC3DiB,KAAK,OAAOC,OAAO,eAKnC,yBAAKlB,UAAU,iBACX,yBAAKA,UAAU,YACVW,IAAO,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAASQ,KAAI,SAACC,EAAQC,GAC9B,OAAO,kBAAC,EAAD,CACHrB,UAAU,QACVE,IAAKkB,EAAOE,UACZnB,KAAMiB,EAAOG,UACbnB,mBAAoB,SAACD,GAAD,OA7BrB,SAACA,GACxBqB,QAAQC,IAAI,SAAUtB,GA4BgCC,CAAmBD,e,MCnClE,SAASuB,IACpB,OACI,yBAAK1B,UAAU,UACX,2D,6BCAG2B,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,0BCIQC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,oBAAsB,SAACC,EAASC,EAAOC,EAASC,GAC5C,EAAKC,SAAS,CACVC,MACI,kBAAC,IAAD,CACIH,QAASA,EACTC,MAAOA,EACPG,MAAO,CAAEC,QAAS,QAASC,UAAW,SACtCP,MAAOA,EACPQ,UAAW,kBAAM,EAAKC,oBACtBC,kBAAkB,UAClBC,QAAQ,MAEPZ,MAvBE,EA6BnBU,iBAAmB,WACf,EAAKN,SAAS,CACVC,MAAO,QA/BI,EAmCnBQ,kBAAoB,WAChB,EAAKC,uBApCU,EAuCnBA,oBAAsB,WAClBpB,EAAMqB,IAAI,cAAcC,MAAK,SAAAC,GACzB,EAAKb,SAAS,CACVc,WAAYD,EAASE,UAE1BC,OAAM,SAAAjB,GACL,OAAO,EAAKJ,oBAAoBI,EAAMc,SAASE,KAAKnB,QAAUG,EAAMc,SAASE,KAAKnB,QAAUG,EAAMH,QAAS,SAAS,GAAO,OA7ChH,EAiDnBqB,eAAiB,WACb,IAAMC,EAAW,CACbjC,UAAW,EAAKkC,MAAMC,SACtBpC,UAAW,EAAKmC,MAAME,UAE1B/B,EAAMgC,KAAK,aAAcJ,GAAUN,MAAK,SAAAC,GACpC,OAAO,EAAKlB,oBAAoBkB,EAASE,KAAKnB,QAAS,WAAW,GAAM,MACzEoB,OAAM,SAAAjB,GACL,OAAO,EAAKJ,oBAAoBI,EAAMc,SAASE,KAAKnB,QAAS,SAAS,GAAO,OAzDlE,EA6DnB2B,iBAAmB,SAAC7C,GAChB,IAAI8C,EAAe9C,EAAM+C,OAAOC,MAE1BN,EAAWI,EAAa,GAAG3D,KACjCqB,QAAQC,IAAIiC,GACZ,IAAMO,EAASP,EAASQ,YAAY,KAAO,EACrCC,EAAUT,EAASU,OAAOH,EAAQP,EAASW,QAAQC,cACzD,GAAe,OAAXH,GAA+B,QAAXA,GAAgC,OAAXA,EAEzC,OAAO,EAAKlC,oBAAoB,+BAAgC,SAAS,GAAO,GAGpF,GAAI6B,EAAaO,OAAS,EAAG,CAEzB,IAAIE,EAAaT,EAAa,GAE1BU,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAACC,GACjB,EAAKrC,SAAS,CACVqB,SAAUgB,EAAgBZ,OAAOa,OACjClB,SAAUI,EAAa,GAAG3D,QAIlCqE,EAAWK,cAAcN,GACzB,EAAKhB,mBArFT,EAAKE,MAAQ,CACTlB,MAAO,KACPoB,SAAU,GACVD,SAAU,GACVN,WAAY,IAND,E,qDA2FT,IAAD,OACL,OACI,oCACK0B,KAAKrB,MAAMlB,MACZ,yBAAKvC,UAAU,WACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAAMW,QAASmE,KAAKrB,MAAML,WAAY1C,iBAAkB,SAACM,GAAD,OAAW,EAAK6C,iBAAiB7C,OAE7F,yBAAKhB,UAAU,kBACX,kBAAC,EAAD,a,GAxGa+E,aCKtBC,MARf,WACE,OACE,yBAAKhF,UAAU,OACb,kBAAC,EAAD,QCKciF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdzC,OAAM,SAAAjB,GACLb,QAAQa,MAAMA,EAAMH,c","file":"static/js/main.9ad2671c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n\n    return (\n        <div className='header'>\n            <h2>Gallery</h2>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './image.css';\n\nfunction image({ img, name, handlePreviewImage }) {\n\n    return (\n        <div id={name} className='image'>\n            <img onclick={() => handlePreviewImage(name)} src={img} alt='' />\n            <h3>{name}</h3>\n        </div>\n    )\n}\n\nexport default image\n","import React from 'react';\nimport './Body.css';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { Button } from '@material-ui/core';\nimport './fileUpload.css';\nimport Image from './image';\n\nfunction Body({ handleUploadFile, imgList }) {\n\n    const handlePreviewImage = (name) => {\n        console.log('cliced', name)\n    }\n\n    return (\n        <>\n            <div className='body'>\n                <div className='file_upload'>\n                    <div className='file_border'>\n                        <Button\n                            className='input_button'\n                            variant=\"contained\"\n                            component=\"label\"\n                        >\n                            <CloudUploadIcon className='upload_icon' />\n                            <span className='upload_lable'>Upload</span>\n                            <input onChange={(event) => handleUploadFile(event)} className='file_input'\n                                type=\"file\" accept=\"image/*\"\n                            />\n                        </Button>\n                    </div>\n                </div>\n                <div className='img_container'>\n                    <div className='img_list'>\n                        {imgList && imgList?.map((record, index) => {\n                            return <Image\n                                className='image'\n                                img={record.file_data}\n                                name={record.file_name}\n                                handlePreviewImage={(name) => handlePreviewImage(name)}\n                            />\n                        })}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Body;","import React from 'react';\nimport './Footer.css';\n\nexport default function Footer() {\n    return (\n        <div className='footer'>\n            <h2>FullStack Challenge - 2020</h2>\n        </div>\n    )\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:5000'\n});\n\nexport default instance;","import React, { Component } from 'react'\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\nimport axios from '../../util/axios';\n\nexport default class galarry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alert: null,\n            fileData: '',\n            fileName: '',\n            imagesList: []\n        };\n    };\n\n    // Pop-Ups for response in Modals\n    handleResponsePopUp = (message, title, success, error) => {\n        this.setState({\n            alert: (\n                <ReactBSAlert\n                    success={success}\n                    error={error}\n                    style={{ display: \"block\", marginTop: \"250px\" }}\n                    title={title}\n                    onConfirm={() => this.handleModalClose()}\n                    confirmBtnBsStyle=\"success\"\n                    btnSize=\"md\"\n                >\n                    {message}\n                </ReactBSAlert>\n            )\n        });\n    };\n\n    handleModalClose = () => {\n        this.setState({\n            alert: null\n        });\n    };\n\n    componentDidMount = () => {\n        this.handleGetImagesList();\n    }\n\n    handleGetImagesList = () => {\n        axios.get('/api/image').then(response => {\n            this.setState({\n                imagesList: response.data\n            });\n        }).catch(error => {\n            return this.handleResponsePopUp(error.response.data.message ? error.response.data.message : error.message, 'Error', false, true);\n        });\n    }\n\n    handleSaveFile = () => {\n        const postData = {\n            file_name: this.state.fileName,\n            file_data: this.state.fileData,\n        };\n        axios.post('/api/image', postData).then(response => {\n            return this.handleResponsePopUp(response.data.message, 'Success', true, false);\n        }).catch(error => {\n            return this.handleResponsePopUp(error.response.data.message, 'Error', false, true);\n        });\n    };\n\n    handleFileChange = (event) => {\n        let selectedFile = event.target.files;\n        /*Chaeck file type*/\n        const fileName = selectedFile[0].name;\n        console.log(fileName)\n        const idxDot = fileName.lastIndexOf(\".\") + 1;\n        const extFile = fileName.substr(idxDot, fileName.length).toLowerCase();\n        if (extFile == \"jpg\" || extFile == \"jpeg\" || extFile == \"png\") {\n        } else {\n            return this.handleResponsePopUp('Only image media is suported', 'Error', false, true);\n        };\n        //Check File is not Empty\n        if (selectedFile.length > 0) {\n            // Select the very first file from list\n            let fileToLoad = selectedFile[0];\n            // FileReader function for read the file.\n            let fileReader = new FileReader();\n            // Onload of file read the file content\n            fileReader.onload = (fileLoadedEvent) => {\n                this.setState({\n                    fileData: fileLoadedEvent.target.result,\n                    fileName: selectedFile[0].name\n                });\n            };\n            // Convert data to base64\n            fileReader.readAsDataURL(fileToLoad);\n            this.handleSaveFile();\n        };\n    };\n\n    render() {\n        return (\n            <>\n                {this.state.alert}\n                <div className='galarry'>\n                    <div className='galarry_header'>\n                        <Header />\n                    </div>\n                    <div className='galarry_body'>\n                        <Body imgList={this.state.imagesList} handleUploadFile={(event) => this.handleFileChange(event)} />\n                    </div>\n                    <div className='galarry_fotter'>\n                        <Footer />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport Galarry from './views/components/galarry';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Galarry />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}